{
    "description": "Compare Config Tables",
    "component": "com.sap.system.python3Operator",
    "versionStatus": "active",
    "inports": [
        {
            "name": "JD1",
            "type": "message"
        },
        {
            "name": "JD2",
            "type": "message"
        }
    ],
    "outports": [
        {
            "name": "out",
            "type": "message"
        }
    ],
    "iconsrc": "python.svg",
    "config": {
        "script": "import pandas as pd\nimport copy\nimport json\nimport io\nimport numpy as np\nimport sys\n\n\n\ncounter = 0\nmain_df = pd.DataFrame()\nmain_dict = {}\ncol_dict = {}\n\nclass Functor:\n    def __init__(self, n): \n        self.port = n\n    \n    def get_tab_cols_keys(self,abtyplist,sid):\n        keys = []\n        cols = []\n        global col_dict\n        \n        if not col_dict.get(sid):\n            col_dict.update({sid : {}})\n        #api.logger.info(col_dict)\n        for i in abtyplist:\n            name = i.get('Field').get('COLUMNNAME')\n            name_sid = f\"{i.get('Field').get('COLUMNNAME')}_{sid}\"\n            \n            #if col_dict.get(sid):\n            col_dict.get(sid).update({name : name_sid})\n            \n            if i.get('Field').get('KEY') == 'X':\n                col_dict.get(sid).update({name : name})\n                cols.append(name)\n                keys.append(name)\n            else:\n                col_dict.get(sid).update({name : name_sid})\n                cols.append(name_sid)\n                # cols.append(i.get('Field').get('COLUMNNAME'))\n        cols.append(f\"Table_{sid}\")\n        cols.append(f\"Flag_{sid}\")\n        #api.logger.info(col_dict)\n        return cols,keys\n        \n    \n    def on_input(self,msg):\n        global counter\n        global main_df\n        global main_dict\n        # global col_dict\n        #counter += 1\n        inp_ports = api.get_inport_names()\n        #api.logger.info(counter)\n        \n        message = msg\n        \n        #Read attributes\n        var = json.dumps(message.attributes) \n        attr = json.loads(var)    \n        \n        #CHECK If its last batch\n        if \"message.lastBatch\" in attr:\n            #api.logger.info(col_dict)\n            counter += 1\n            if counter == len(inp_ports):\n                a = str(main_dict.get(\"JD1\").shape)\n                b = str(main_dict.get(\"JD2\").shape)\n                api.logger.info(a)\n                api.logger.info(b)\n\n                \n                main_sys = inp_ports[0]\n                main_dict[main_sys] = main_dict[main_sys].iloc[:,:-2]\n                \n                for n,df in enumerate(main_dict.values()):\n                    # if n == 0:\n                    #     continue\n                    if list(main_dict.keys())[n] == main_sys:\n                        continue\n                    df = df.iloc[:,:-2]\n                    main_df = main_dict[main_sys].join(df,how='inner')\n                    \n                api.logger.info(main_df.shape)    \n                api.logger.info(f\"{pd.__version__}\")\n                main_df.applymap(str)\n                for i in inp_ports:\n                    if i == main_sys:\n                        api.logger.info(f\"inside main sys{i}\")\n                        continue\n                    \n                    api.logger.info(col_dict[i])\n                    \n                    for data in col_dict[i]:\n                        \n                        col_sid = col_dict.get(i).get(data)\n                        col_main = col_dict.get(main_sys).get(data)\n                        \n                        if data == col_sid:\n                            continue               \n                        api.logger.info(col_sid)\n                        api.logger.info(col_main)\n                        \n                        main_df[col_sid] = main_df.apply(lambda x : x if x[col_sid] != x[col_main] else \n                                                              np.nan,axis=1)\n\n                # df_list = list(main_dict.values())\n                # main_df = pd.concat(df_list).drop_duplicates(keep=False)\n                api.logger.info(\"out of df\")\n                api.logger.info(main_df.head())\n                api.logger.info(main_df.shape)\n                df_csv = main_df.to_csv()\n                api.send(\"out\", api.Message(attributes = None, body=df_csv))    \n            \n        else:\n            \n            dtypelist = attr.get('ABAP').get('Fields')\n            abaptypelist = attr.get('metadata')\n            abtyplist = [i for i in abaptypelist if not (i.get('Field').get('ABAPTYPE') == '')]\n            \n            current_port = self.port\n            #Read data to DataFrame\n            data_stream = io.StringIO(message.body)\n            \n            #Get Cols and Keys from MySQL\n            cols,keys = self.get_tab_cols_keys(abtyplist,current_port)\n            \n            temp_df = pd.read_csv(data_stream,names=cols,index_col=keys,dtype=str)\n            \n            # temp_df.insert(0,'SystemID',str(current_port))\n            # keys.insert(0,'SystemID')\n            \n            # temp_df = temp_df.set_index(keys)            \n            \n            if current_port not in main_dict:\n                main_dict[current_port] = copy.deepcopy(temp_df)\n            else:\n                main_dict[current_port] = main_dict[current_port].append(temp_df)\n        \n        \n        # if counter == len(inp_ports):\n        #     counter = 0\n        \n\n# inp_port = api.get_inport_names()\n# api.logger.info(inp_port)\n\n# for i in inp_port:\n#     api.logger.info(i)\n#     def data_in(data):\n#         api.logger.info(f\"Port is {i}\")\n#         on_input(data)\n#     api.set_port_callback(i, data_in)\n\nobj_dict = {}\n\ninp_port = api.get_inport_names()\napi.logger.info(inp_port)\n\nfor i in inp_port:\n    obj_dict[i] = Functor(i)\n    if obj_dict[i]:\n        api.set_port_callback(i, obj_dict[i].on_input)",
        "scriptReference": "script.py"
    }
}